{"type":"auditAdvisory","data":{"resolution":{"id":1067342,"path":"minimist","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.2.3","paths":["minimist"]}],"metadata":null,"vulnerable_versions":"<1.2.6","module_name":"minimist","severity":"critical","github_advisory_id":"GHSA-xvch-5gv4-984h","cves":["CVE-2021-44906"],"access":"public","patched_versions":">=1.2.6","cvss":{"score":9.8,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"},"updated":"2022-04-04T21:39:39.000Z","recommendation":"Upgrade to version 1.2.6 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1067342,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-44906\n- https://github.com/substack/minimist/issues/164\n- https://github.com/substack/minimist/blob/master/index.js#L69\n- https://snyk.io/vuln/SNYK-JS-MINIMIST-559764\n- https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068\n- https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip\n- https://github.com/advisories/GHSA-xvch-5gv4-984h","created":"2022-03-18T00:01:09.000Z","reported_by":null,"title":"Prototype Pollution in minimist","npm_advisory_id":null,"overview":"Minimist <=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95).","url":"https://github.com/advisories/GHSA-xvch-5gv4-984h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1067452,"path":"@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.10.0","paths":["@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge"]}],"metadata":null,"vulnerable_versions":"<1.0.0","module_name":"node-forge","severity":"moderate","github_advisory_id":"GHSA-8fr3-hfg3-gpgp","cves":["CVE-2022-0122"],"access":"public","patched_versions":">=1.0.0","cvss":{"score":0,"vectorString":null},"updated":"2022-01-21T23:36:19.000Z","recommendation":"Upgrade to version 1.0.0 or later","cwe":["CWE-601"],"found_by":null,"deleted":null,"id":1067452,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-0122\n- https://github.com/digitalbazaar/forge/commit/db8016c805371e72b06d8e2edfe0ace0df934a5e\n- https://huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae\n- https://github.com/advisories/GHSA-8fr3-hfg3-gpgp","created":"2022-01-21T23:36:19.000Z","reported_by":null,"title":"Open Redirect in node-forge","npm_advisory_id":null,"overview":"parseUrl functionality in node-forge mishandles certain uses of backslash such as https:/\\/\\/\\ and interprets the URI as a relative path. ","url":"https://github.com/advisories/GHSA-8fr3-hfg3-gpgp"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1067471,"path":"@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.10.0","paths":["@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge"]}],"metadata":null,"vulnerable_versions":"<1.0.0","module_name":"node-forge","severity":"low","github_advisory_id":"GHSA-5rrq-pxf6-6jx5","cves":[],"access":"public","patched_versions":">=1.0.0","cvss":{"score":0,"vectorString":null},"updated":"2022-01-08T00:22:42.000Z","recommendation":"Upgrade to version 1.0.0 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1067471,"references":"- https://github.com/digitalbazaar/forge/security/advisories/GHSA-5rrq-pxf6-6jx5\n- https://github.com/advisories/GHSA-5rrq-pxf6-6jx5","created":"2022-01-08T00:22:42.000Z","reported_by":null,"title":"Prototype Pollution in node-forge debug API.","npm_advisory_id":null,"overview":"### Impact\nThe `forge.debug` API had a potential prototype pollution issue if called with untrusted input. The API was only used for internal debug purposes in a safe way and never documented or advertised.  It is suspected that uses of this API, if any exist, would likely not have used untrusted inputs in a vulnerable way.\n\n### Patches\nThe `forge.debug` API and related functions were removed in 1.0.0.\n\n### Workarounds\nDon't use the `forge.debug` API directly or indirectly with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/1-npm-node-forge/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge).\n* Email us at support@digitalbazaar.com.","url":"https://github.com/advisories/GHSA-5rrq-pxf6-6jx5"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1070354,"path":"@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.10.0","paths":["@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge"]}],"metadata":null,"vulnerable_versions":"<1.3.0","module_name":"node-forge","severity":"moderate","github_advisory_id":"GHSA-2r2c-g63r-vccr","cves":["CVE-2022-24773"],"access":"public","patched_versions":">=1.3.0","cvss":{"score":5.3,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"},"updated":"2022-05-13T18:50:27.000Z","recommendation":"Upgrade to version 1.3.0 or later","cwe":["CWE-347"],"found_by":null,"deleted":null,"id":1070354,"references":"- https://github.com/digitalbazaar/forge/security/advisories/GHSA-2r2c-g63r-vccr\n- https://nvd.nist.gov/vuln/detail/CVE-2022-24773\n- https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1\n- https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2\n- https://github.com/advisories/GHSA-2r2c-g63r-vccr","created":"2022-03-18T23:10:48.000Z","reported_by":null,"title":"Improper Verification of Cryptographic Signature in `node-forge`","npm_advisory_id":null,"overview":"### Impact\n\nRSA PKCS#1 v1.5 signature verification code is not properly checking `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)","url":"https://github.com/advisories/GHSA-2r2c-g63r-vccr"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1070355,"path":"@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.10.0","paths":["@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge"]}],"metadata":null,"vulnerable_versions":"<1.3.0","module_name":"node-forge","severity":"high","github_advisory_id":"GHSA-x4jg-mjrx-434g","cves":["CVE-2022-24772"],"access":"public","patched_versions":">=1.3.0","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"},"updated":"2022-05-13T18:50:27.000Z","recommendation":"Upgrade to version 1.3.0 or later","cwe":["CWE-347"],"found_by":null,"deleted":null,"id":1070355,"references":"- https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g\n- https://nvd.nist.gov/vuln/detail/CVE-2022-24772\n- https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1\n- https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2\n- https://github.com/advisories/GHSA-x4jg-mjrx-434g","created":"2022-03-18T23:10:28.000Z","reported_by":null,"title":"Improper Verification of Cryptographic Signature in node-forge","npm_advisory_id":null,"overview":"### Impact\n\nRSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)","url":"https://github.com/advisories/GHSA-x4jg-mjrx-434g"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1070356,"path":"@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.10.0","paths":["@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge"]}],"metadata":null,"vulnerable_versions":"<1.3.0","module_name":"node-forge","severity":"high","github_advisory_id":"GHSA-cfm4-qjh2-4765","cves":["CVE-2022-24771"],"access":"public","patched_versions":">=1.3.0","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N"},"updated":"2022-05-13T18:50:27.000Z","recommendation":"Upgrade to version 1.3.0 or later","cwe":["CWE-347"],"found_by":null,"deleted":null,"id":1070356,"references":"- https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765\n- https://nvd.nist.gov/vuln/detail/CVE-2022-24771\n- https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1\n- https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2\n- https://github.com/advisories/GHSA-cfm4-qjh2-4765","created":"2022-03-18T23:09:54.000Z","reported_by":null,"title":"Improper Verification of Cryptographic Signature in node-forge","npm_advisory_id":null,"overview":"### Impact\n\nRSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.\n\n### Patches\n\nThe issue has been addressed in `node-forge` `1.3.0`.\n\n### References\n\nFor more information, please see\n[\"Bleichenbacher's RSA signature forgery based on implementation error\"](https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/)\nby Hal Finney.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at [example email address](mailto:security@digitalbazaar.com)","url":"https://github.com/advisories/GHSA-cfm4-qjh2-4765"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1081698,"path":"@angular-devkit/build-angular>terser","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"5.5.1","paths":["@angular-devkit/build-angular>terser"]}],"metadata":null,"vulnerable_versions":">=5.0.0 <5.14.2","module_name":"terser","severity":"high","github_advisory_id":"GHSA-4wf5-vphf-c2xc","cves":["CVE-2022-25858"],"access":"public","patched_versions":">=5.14.2","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2022-07-22T16:30:35.000Z","recommendation":"Upgrade to version 5.14.2 or later","cwe":[],"found_by":null,"deleted":null,"id":1081698,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-25858\n- https://github.com/terser/terser/commit/a4da7349fdc92c05094f41d33d06d8cd4e90e76b\n- https://github.com/terser/terser/commit/d8cc5691be980d663c29cc4d5ce67e852d597012\n- https://github.com/terser/terser/blob/master/lib/compress/evaluate.js%23L135\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2949722\n- https://snyk.io/vuln/SNYK-JS-TERSER-2806366\n- https://github.com/advisories/GHSA-4wf5-vphf-c2xc","created":"2022-07-16T00:00:20.000Z","reported_by":null,"title":"Terser insecure use of regular expressions before v4.8.1 and v5.14.2 leads to ReDoS","npm_advisory_id":null,"overview":"The package terser before 4.8.1, from 5.0.0 and before 5.14.2 are vulnerable to Regular Expression Denial of Service (ReDoS) due to insecure usage of regular expressions.","url":"https://github.com/advisories/GHSA-4wf5-vphf-c2xc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1081840,"path":"@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.10.0","paths":["@angular-devkit/build-angular>webpack-dev-server>selfsigned>node-forge"]}],"metadata":null,"vulnerable_versions":"<1.0.0","module_name":"node-forge","severity":"low","github_advisory_id":"GHSA-gf8q-jrpm-jvxq","cves":[],"access":"public","patched_versions":">=1.0.0","cvss":{"score":0,"vectorString":null},"updated":"2022-07-28T20:10:17.000Z","recommendation":"Upgrade to version 1.0.0 or later","cwe":["CWE-601"],"found_by":null,"deleted":null,"id":1081840,"references":"- https://github.com/digitalbazaar/forge/security/advisories/GHSA-gf8q-jrpm-jvxq\n- https://nvd.nist.gov/vuln/detail/CVE-2022-0122\n- https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae\n- https://github.com/advisories/GHSA-gf8q-jrpm-jvxq","created":"2022-01-08T00:22:02.000Z","reported_by":null,"title":"URL parsing in node-forge could lead to undesired behavior.","npm_advisory_id":null,"overview":"### Impact\nThe regex used for the `forge.util.parseUrl` API would not properly parse certain inputs resulting in a parsed data structure that could lead to undesired behavior.\n\n### Patches\n`forge.util.parseUrl` and other very old related URL APIs were removed in 1.0.0 in favor of letting applications use the more modern WHATWG URL Standard API.\n\n### Workarounds\nEnsure code does not directly or indirectly call `forge.util.parseUrl` with untrusted input.\n\n### References\n- https://www.huntr.dev/bounties/41852c50-3c6d-4703-8c55-4db27164a4ae/\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [forge](https://github.com/digitalbazaar/forge)\n* Email us at support@digitalbazaar.com\n","url":"https://github.com/advisories/GHSA-gf8q-jrpm-jvxq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1084992,"path":"@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.0","paths":["@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils"]},{"version":"2.0.0","paths":["@angular-devkit/build-angular>loader-utils"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.0.4","module_name":"loader-utils","severity":"high","github_advisory_id":"GHSA-3rfm-jhwj-7488","cves":["CVE-2022-37603"],"access":"public","patched_versions":">=2.0.4","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2022-11-15T21:26:43.000Z","recommendation":"Upgrade to version 2.0.4 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1084992,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37603\n- https://github.com/webpack/loader-utils/issues/213\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\n- https://github.com/webpack/loader-utils/issues/216\n- https://github.com/advisories/GHSA-3rfm-jhwj-7488","created":"2022-10-14T19:00:38.000Z","reported_by":null,"title":"loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS) via url variable","npm_advisory_id":null,"overview":"A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.","url":"https://github.com/advisories/GHSA-3rfm-jhwj-7488"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1084992,"path":"@angular-devkit/build-angular>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.0","paths":["@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils"]},{"version":"2.0.0","paths":["@angular-devkit/build-angular>loader-utils"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.0.4","module_name":"loader-utils","severity":"high","github_advisory_id":"GHSA-3rfm-jhwj-7488","cves":["CVE-2022-37603"],"access":"public","patched_versions":">=2.0.4","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2022-11-15T21:26:43.000Z","recommendation":"Upgrade to version 2.0.4 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1084992,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37603\n- https://github.com/webpack/loader-utils/issues/213\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\n- https://github.com/webpack/loader-utils/issues/216\n- https://github.com/advisories/GHSA-3rfm-jhwj-7488","created":"2022-10-14T19:00:38.000Z","reported_by":null,"title":"loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS) via url variable","npm_advisory_id":null,"overview":"A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.","url":"https://github.com/advisories/GHSA-3rfm-jhwj-7488"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@angular-devkit/build-angular>babel-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@angular-devkit/build-angular>webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@angular-devkit/build-angular>worker-plugin>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1087892,"path":"@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.0","paths":["@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils"]},{"version":"2.0.0","paths":["@angular-devkit/build-angular>loader-utils"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.0.4","module_name":"loader-utils","severity":"high","github_advisory_id":"GHSA-hhq3-ff78-jv3g","cves":["CVE-2022-37599"],"access":"public","patched_versions":">=2.0.4","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-10T05:02:39.000Z","recommendation":"Upgrade to version 2.0.4 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1087892,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37599\n- https://github.com/webpack/loader-utils/issues/211\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83\n- https://github.com/webpack/loader-utils/issues/216\n- https://github.com/webpack/loader-utils/commit/36dc86617930a5cf18af51cf3f53d0ee284d2824\n- https://github.com/advisories/GHSA-hhq3-ff78-jv3g","created":"2022-10-12T12:00:27.000Z","reported_by":null,"title":"loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS)","npm_advisory_id":null,"overview":"A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.","url":"https://github.com/advisories/GHSA-hhq3-ff78-jv3g"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1087892,"path":"@angular-devkit/build-angular>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.0","paths":["@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils"]},{"version":"2.0.0","paths":["@angular-devkit/build-angular>loader-utils"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.0.4","module_name":"loader-utils","severity":"high","github_advisory_id":"GHSA-hhq3-ff78-jv3g","cves":["CVE-2022-37599"],"access":"public","patched_versions":">=2.0.4","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-10T05:02:39.000Z","recommendation":"Upgrade to version 2.0.4 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1087892,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37599\n- https://github.com/webpack/loader-utils/issues/211\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83\n- https://github.com/webpack/loader-utils/issues/216\n- https://github.com/webpack/loader-utils/commit/36dc86617930a5cf18af51cf3f53d0ee284d2824\n- https://github.com/advisories/GHSA-hhq3-ff78-jv3g","created":"2022-10-12T12:00:27.000Z","reported_by":null,"title":"loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS)","npm_advisory_id":null,"overview":"A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.","url":"https://github.com/advisories/GHSA-hhq3-ff78-jv3g"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1087895,"path":"@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.0","paths":["@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils"]},{"version":"2.0.0","paths":["@angular-devkit/build-angular>loader-utils"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.0.3","module_name":"loader-utils","severity":"critical","github_advisory_id":"GHSA-76p3-8jx3-jpfq","cves":["CVE-2022-37601"],"access":"public","patched_versions":">=2.0.3","cvss":{"score":9.8,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"},"updated":"2023-01-10T05:06:11.000Z","recommendation":"Upgrade to version 2.0.3 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1087895,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37601\n- https://github.com/webpack/loader-utils/issues/212\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/parseQuery.js#L11\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/parseQuery.js#L47\n- https://github.com/webpack/loader-utils/releases/tag/v2.0.3\n- https://github.com/webpack/loader-utils/pull/217\n- https://github.com/webpack/loader-utils/pull/220\n- https://github.com/webpack/loader-utils/releases/tag/v1.4.1\n- https://github.com/webpack/loader-utils/issues/212#issuecomment-1319192884\n- https://github.com/xmldom/xmldom/issues/436#issuecomment-1319412826\n- https://dl.acm.org/doi/abs/10.1145/3488932.3497769\n- https://dl.acm.org/doi/pdf/10.1145/3488932.3497769\n- https://lists.debian.org/debian-lts-announce/2022/12/msg00044.html\n- http://users.encs.concordia.ca/~mmannan/publications/JS-vulnerability-aisaccs2022.pdf\n- https://github.com/advisories/GHSA-76p3-8jx3-jpfq","created":"2022-10-13T12:00:28.000Z","reported_by":null,"title":"Prototype pollution in webpack loader-utils","npm_advisory_id":null,"overview":"Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js.","url":"https://github.com/advisories/GHSA-76p3-8jx3-jpfq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1087895,"path":"@angular-devkit/build-angular>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.0.0","paths":["@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils"]},{"version":"2.0.0","paths":["@angular-devkit/build-angular>loader-utils"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.0.3","module_name":"loader-utils","severity":"critical","github_advisory_id":"GHSA-76p3-8jx3-jpfq","cves":["CVE-2022-37601"],"access":"public","patched_versions":">=2.0.3","cvss":{"score":9.8,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"},"updated":"2023-01-10T05:06:11.000Z","recommendation":"Upgrade to version 2.0.3 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1087895,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37601\n- https://github.com/webpack/loader-utils/issues/212\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/parseQuery.js#L11\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/parseQuery.js#L47\n- https://github.com/webpack/loader-utils/releases/tag/v2.0.3\n- https://github.com/webpack/loader-utils/pull/217\n- https://github.com/webpack/loader-utils/pull/220\n- https://github.com/webpack/loader-utils/releases/tag/v1.4.1\n- https://github.com/webpack/loader-utils/issues/212#issuecomment-1319192884\n- https://github.com/xmldom/xmldom/issues/436#issuecomment-1319412826\n- https://dl.acm.org/doi/abs/10.1145/3488932.3497769\n- https://dl.acm.org/doi/pdf/10.1145/3488932.3497769\n- https://lists.debian.org/debian-lts-announce/2022/12/msg00044.html\n- http://users.encs.concordia.ca/~mmannan/publications/JS-vulnerability-aisaccs2022.pdf\n- https://github.com/advisories/GHSA-76p3-8jx3-jpfq","created":"2022-10-13T12:00:28.000Z","reported_by":null,"title":"Prototype pollution in webpack loader-utils","npm_advisory_id":null,"overview":"Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js.","url":"https://github.com/advisories/GHSA-76p3-8jx3-jpfq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1080920,"path":"json-server>update-notifier>latest-version>package-json>got","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"9.6.0","paths":["json-server>update-notifier>latest-version>package-json>got"]}],"metadata":null,"vulnerable_versions":"<11.8.5","module_name":"got","severity":"moderate","github_advisory_id":"GHSA-pfrx-2q88-qq97","cves":["CVE-2022-33987"],"access":"public","patched_versions":">=11.8.5","cvss":{"score":5.3,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N"},"updated":"2022-07-05T21:24:52.000Z","recommendation":"Upgrade to version 11.8.5 or later","cwe":[],"found_by":null,"deleted":null,"id":1080920,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-33987\n- https://github.com/sindresorhus/got/pull/2047\n- https://github.com/sindresorhus/got/compare/v12.0.3...v12.1.0\n- https://github.com/sindresorhus/got/commit/861ccd9ac2237df762a9e2beed7edd88c60782dc\n- https://github.com/sindresorhus/got/releases/tag/v11.8.5\n- https://github.com/sindresorhus/got/releases/tag/v12.1.0\n- https://github.com/advisories/GHSA-pfrx-2q88-qq97","created":"2022-06-19T00:00:21.000Z","reported_by":null,"title":"Got allows a redirect to a UNIX socket","npm_advisory_id":null,"overview":"The got package before 11.8.5 and 12.1.0 for Node.js allows a redirect to a UNIX socket.","url":"https://github.com/advisories/GHSA-pfrx-2q88-qq97"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1081481,"path":"mocha>nanoid","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"3.1.20","paths":["mocha>nanoid"]}],"metadata":null,"vulnerable_versions":">=3.0.0 <3.1.31","module_name":"nanoid","severity":"moderate","github_advisory_id":"GHSA-qrpm-p2h7-hrv2","cves":["CVE-2021-23566"],"access":"public","patched_versions":">=3.1.31","cvss":{"score":5.5,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N"},"updated":"2022-03-18T13:15:56.000Z","recommendation":"Upgrade to version 3.1.31 or later","cwe":["CWE-200"],"found_by":null,"deleted":null,"id":1081481,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-23566\n- https://github.com/ai/nanoid/pull/328\n- https://github.com/ai/nanoid/commit/2b7bd9332bc49b6330c7ddb08e5c661833db2575\n- https://gist.github.com/artalar/bc6d1eb9a3477d15d2772e876169a444\n- https://snyk.io/vuln/SNYK-JS-NANOID-2332193\n- https://github.com/advisories/GHSA-qrpm-p2h7-hrv2","created":"2022-01-21T23:57:06.000Z","reported_by":null,"title":"Exposure of Sensitive Information to an Unauthorized Actor in nanoid","npm_advisory_id":null,"overview":"The package nanoid from 3.0.0, before 3.1.31, are vulnerable to Information Exposure via the valueOf() function which allows to reproduce the last id generated.","url":"https://github.com/advisories/GHSA-qrpm-p2h7-hrv2"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085466,"path":"source-map-explorer>ejs","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.7.4","paths":["source-map-explorer>ejs"]}],"metadata":null,"vulnerable_versions":"<3.1.7","module_name":"ejs","severity":"critical","github_advisory_id":"GHSA-phwq-j96m-2c2q","cves":["CVE-2022-29078"],"access":"public","patched_versions":">=3.1.7","cvss":{"score":9.8,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"},"updated":"2023-01-07T05:03:00.000Z","recommendation":"Upgrade to version 3.1.7 or later","cwe":["CWE-74"],"found_by":null,"deleted":null,"id":1085466,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-29078\n- https://eslam.io/posts/ejs-server-side-template-injection-rce/\n- https://github.com/mde/ejs/commit/15ee698583c98dadc456639d6245580d17a24baf\n- https://github.com/mde/ejs/releases\n- https://security.netapp.com/advisory/ntap-20220804-0001/\n- https://github.com/advisories/GHSA-phwq-j96m-2c2q","created":"2022-04-26T00:00:40.000Z","reported_by":null,"title":"ejs template injection vulnerability","npm_advisory_id":null,"overview":"The ejs (aka Embedded JavaScript templates) package 3.1.6 for Node.js allows server-side template injection in settings[view options][outputFunctionName]. This is parsed as an internal option, and overwrites the outputFunctionName option with an arbitrary OS command (which is executed upon template compilation).","url":"https://github.com/advisories/GHSA-phwq-j96m-2c2q"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085550,"path":"marked","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.7.0","paths":["marked","@compodoc/compodoc>marked"]}],"metadata":null,"vulnerable_versions":"<4.0.10","module_name":"marked","severity":"high","github_advisory_id":"GHSA-5v2h-r2cx-5xgj","cves":["CVE-2022-21681"],"access":"public","patched_versions":">=4.0.10","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-08T05:05:17.000Z","recommendation":"Upgrade to version 4.0.10 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1085550,"references":"- https://github.com/markedjs/marked/security/advisories/GHSA-5v2h-r2cx-5xgj\n- https://nvd.nist.gov/vuln/detail/CVE-2022-21681\n- https://github.com/markedjs/marked/commit/8f806573a3f6c6b7a39b8cdb66ab5ebb8d55a5f5\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/\n- https://github.com/advisories/GHSA-5v2h-r2cx-5xgj","created":"2022-01-14T21:04:46.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in marked","npm_advisory_id":null,"overview":"### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x]: x\n\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n- https://marked.js.org/using_advanced#workers\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked](https://github.com/markedjs/marked)\n","url":"https://github.com/advisories/GHSA-5v2h-r2cx-5xgj"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085551,"path":"marked","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.7.0","paths":["marked","@compodoc/compodoc>marked"]}],"metadata":null,"vulnerable_versions":"<4.0.10","module_name":"marked","severity":"high","github_advisory_id":"GHSA-rrrm-qjm4-v8hf","cves":["CVE-2022-21680"],"access":"public","patched_versions":">=4.0.10","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-08T05:05:37.000Z","recommendation":"Upgrade to version 4.0.10 or later","cwe":["CWE-400","CWE-1333"],"found_by":null,"deleted":null,"id":1085551,"references":"- https://github.com/markedjs/marked/security/advisories/GHSA-rrrm-qjm4-v8hf\n- https://nvd.nist.gov/vuln/detail/CVE-2022-21680\n- https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0\n- https://github.com/markedjs/marked/releases/tag/v4.0.10\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/\n- https://github.com/advisories/GHSA-rrrm-qjm4-v8hf","created":"2022-01-14T21:04:41.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in marked","npm_advisory_id":null,"overview":"### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n- https://marked.js.org/using_advanced#workers\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked](https://github.com/markedjs/marked)\n","url":"https://github.com/advisories/GHSA-rrrm-qjm4-v8hf"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085550,"path":"@compodoc/compodoc>marked","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.7.0","paths":["marked","@compodoc/compodoc>marked"]}],"metadata":null,"vulnerable_versions":"<4.0.10","module_name":"marked","severity":"high","github_advisory_id":"GHSA-5v2h-r2cx-5xgj","cves":["CVE-2022-21681"],"access":"public","patched_versions":">=4.0.10","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-08T05:05:17.000Z","recommendation":"Upgrade to version 4.0.10 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1085550,"references":"- https://github.com/markedjs/marked/security/advisories/GHSA-5v2h-r2cx-5xgj\n- https://nvd.nist.gov/vuln/detail/CVE-2022-21681\n- https://github.com/markedjs/marked/commit/8f806573a3f6c6b7a39b8cdb66ab5ebb8d55a5f5\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/\n- https://github.com/advisories/GHSA-5v2h-r2cx-5xgj","created":"2022-01-14T21:04:46.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in marked","npm_advisory_id":null,"overview":"### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `inline.reflinkSearch` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from 'marked';\n\nconsole.log(marked.parse(`[x]: x\n\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n- https://marked.js.org/using_advanced#workers\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked](https://github.com/markedjs/marked)\n","url":"https://github.com/advisories/GHSA-5v2h-r2cx-5xgj"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085551,"path":"@compodoc/compodoc>marked","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.7.0","paths":["marked","@compodoc/compodoc>marked"]}],"metadata":null,"vulnerable_versions":"<4.0.10","module_name":"marked","severity":"high","github_advisory_id":"GHSA-rrrm-qjm4-v8hf","cves":["CVE-2022-21680"],"access":"public","patched_versions":">=4.0.10","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-08T05:05:37.000Z","recommendation":"Upgrade to version 4.0.10 or later","cwe":["CWE-400","CWE-1333"],"found_by":null,"deleted":null,"id":1085551,"references":"- https://github.com/markedjs/marked/security/advisories/GHSA-rrrm-qjm4-v8hf\n- https://nvd.nist.gov/vuln/detail/CVE-2022-21680\n- https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0\n- https://github.com/markedjs/marked/releases/tag/v4.0.10\n- https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/\n- https://github.com/advisories/GHSA-rrrm-qjm4-v8hf","created":"2022-01-14T21:04:41.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in marked","npm_advisory_id":null,"overview":"### Impact\n\n_What kind of vulnerability is it?_\n\nDenial of service.\n\nThe regular expression `block.def` may cause catastrophic backtracking against some strings.\nPoC is the following.\n\n```javascript\nimport * as marked from \"marked\";\n\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n```\n\n_Who is impacted?_\n\nAnyone who runs untrusted markdown through marked and does not use a worker with a time limit.\n\n### Patches\n\n_Has the problem been patched?_\n\nYes\n\n_What versions should users upgrade to?_\n\n4.0.10\n\n### Workarounds\n\n_Is there a way for users to fix or remediate the vulnerability without upgrading?_\n\nDo not run untrusted markdown through marked or run marked on a [worker](https://marked.js.org/using_advanced#workers) thread and set a reasonable time limit to prevent draining resources.\n\n### References\n\n_Are there any links users can visit to find out more?_\n\n- https://marked.js.org/using_advanced#workers\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [marked](https://github.com/markedjs/marked)\n","url":"https://github.com/advisories/GHSA-rrrm-qjm4-v8hf"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085945,"path":"ng-packagr>cssnano>cssnano-preset-default>postcss-svgo>svgo>css-select>nth-check","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.2","paths":["ng-packagr>cssnano>cssnano-preset-default>postcss-svgo>svgo>css-select>nth-check"]}],"metadata":null,"vulnerable_versions":"<2.0.1","module_name":"nth-check","severity":"high","github_advisory_id":"GHSA-rp65-9cf3-cjxr","cves":["CVE-2021-3803"],"access":"public","patched_versions":">=2.0.1","cvss":{"score":7.5,"vectorString":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:05:11.000Z","recommendation":"Upgrade to version 2.0.1 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1085945,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3803\n- https://github.com/fb55/nth-check/commit/9894c1d2010870c351f66c6f6efcf656e26bb726\n- https://huntr.dev/bounties/8cf8cc06-d2cf-4b4e-b42c-99fafb0b04d0\n- https://github.com/advisories/GHSA-rp65-9cf3-cjxr","created":"2021-09-20T20:47:31.000Z","reported_by":null,"title":"Inefficient Regular Expression Complexity in nth-check","npm_advisory_id":null,"overview":"nth-check is vulnerable to Inefficient Regular Expression Complexity","url":"https://github.com/advisories/GHSA-rp65-9cf3-cjxr"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086041,"path":"xlsx","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.15.6","paths":["xlsx"]}],"metadata":null,"vulnerable_versions":"<0.17.0","module_name":"xlsx","severity":"moderate","github_advisory_id":"GHSA-g973-978j-2c3p","cves":["CVE-2021-32014"],"access":"public","patched_versions":">=0.17.0","cvss":{"score":5.5,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:05:31.000Z","recommendation":"Upgrade to version 0.17.0 or later","cwe":["CWE-345","CWE-400"],"found_by":null,"deleted":null,"id":1086041,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-32014\n- https://floqast.com/engineering-blog/post/fuzzing-and-parsing-securely/\n- https://sheetjs.com/pro\n- https://www.npmjs.com/package/xlsx/v/0.17.0\n- https://www.oracle.com/security-alerts/cpujan2022.html\n- https://github.com/advisories/GHSA-g973-978j-2c3p","created":"2021-07-22T19:47:15.000Z","reported_by":null,"title":"Denial of Service in SheetJS Pro","npm_advisory_id":null,"overview":"SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (CPU consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js.","url":"https://github.com/advisories/GHSA-g973-978j-2c3p"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086042,"path":"xlsx","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.15.6","paths":["xlsx"]}],"metadata":null,"vulnerable_versions":"<0.17.0","module_name":"xlsx","severity":"moderate","github_advisory_id":"GHSA-3x9f-74h4-2fqr","cves":["CVE-2021-32012"],"access":"public","patched_versions":">=0.17.0","cvss":{"score":5.5,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:04:45.000Z","recommendation":"Upgrade to version 0.17.0 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1086042,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-32012\n- https://floqast.com/engineering-blog/post/fuzzing-and-parsing-securely/\n- https://sheetjs.com/pro\n- https://www.npmjs.com/package/xlsx/v/0.17.0\n- https://www.oracle.com/security-alerts/cpujan2022.html\n- https://github.com/advisories/GHSA-3x9f-74h4-2fqr","created":"2021-07-22T19:48:17.000Z","reported_by":null,"title":"Denial of Service in SheetJS Pro","npm_advisory_id":null,"overview":"SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (memory consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js (issue 1 of 2).","url":"https://github.com/advisories/GHSA-3x9f-74h4-2fqr"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086043,"path":"xlsx","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.15.6","paths":["xlsx"]}],"metadata":null,"vulnerable_versions":"<0.17.0","module_name":"xlsx","severity":"moderate","github_advisory_id":"GHSA-8vcr-vxm8-293m","cves":["CVE-2021-32013"],"access":"public","patched_versions":">=0.17.0","cvss":{"score":5.5,"vectorString":"CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:04:45.000Z","recommendation":"Upgrade to version 0.17.0 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1086043,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-32013\n- https://floqast.com/engineering-blog/post/fuzzing-and-parsing-securely/\n- https://sheetjs.com/pro\n- https://www.npmjs.com/package/xlsx/v/0.17.0\n- https://www.oracle.com/security-alerts/cpujan2022.html\n- https://github.com/advisories/GHSA-8vcr-vxm8-293m","created":"2021-07-22T19:48:13.000Z","reported_by":null,"title":"Denial of Service in SheetsJS Pro","npm_advisory_id":null,"overview":"SheetJS Pro through 0.16.9 allows attackers to cause a denial of service (memory consumption) via a crafted .xlsx document that is mishandled when read by xlsx.js (issue 2 of 2).","url":"https://github.com/advisories/GHSA-8vcr-vxm8-293m"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1067401,"path":"ngx-md>prismjs","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.24.1","paths":["ngx-md>prismjs"]}],"metadata":null,"vulnerable_versions":">=1.14.0 <1.27.0","module_name":"prismjs","severity":"high","github_advisory_id":"GHSA-3949-f494-cm99","cves":["CVE-2022-23647"],"access":"public","patched_versions":">=1.27.0","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:L/A:L"},"updated":"2022-02-26T01:32:38.000Z","recommendation":"Upgrade to version 1.27.0 or later","cwe":["CWE-79"],"found_by":null,"deleted":null,"id":1067401,"references":"- https://github.com/PrismJS/prism/security/advisories/GHSA-3949-f494-cm99\n- https://nvd.nist.gov/vuln/detail/CVE-2022-23647\n- https://github.com/PrismJS/prism/pull/3341\n- https://github.com/PrismJS/prism/commit/e002e78c343154e1c0ddf9d6a0bb85689e1a5c7c\n- https://github.com/advisories/GHSA-3949-f494-cm99","created":"2022-02-22T19:32:18.000Z","reported_by":null,"title":"Cross-site Scripting in Prism","npm_advisory_id":null,"overview":"### Impact\nPrism's [Command line plugin](https://prismjs.com/plugins/command-line/) can be used by attackers to achieve an XSS attack. The Command line plugin did not properly escape its output, leading to the input text being inserted into the DOM as HTML code.\n\nServer-side usage of Prism is not impacted. Websites that do not use the Command Line plugin are also not impacted.\n\n### Patches\nThis bug has been fixed in v1.27.0.\n\n### Workarounds\nDo not use the Command line plugin on untrusted inputs, or sanitized all code blocks (remove all HTML code text) from all code blocks that use the Command line plugin.\n\n### References\n- https://github.com/PrismJS/prism/pull/3341","url":"https://github.com/advisories/GHSA-3949-f494-cm99"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085369,"path":"ngx-md>prismjs","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.24.1","paths":["ngx-md>prismjs"]}],"metadata":null,"vulnerable_versions":"<1.25.0","module_name":"prismjs","severity":"moderate","github_advisory_id":"GHSA-hqhp-5p83-hx96","cves":["CVE-2021-3801"],"access":"public","patched_versions":">=1.25.0","cvss":{"score":6.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"},"updated":"2023-01-06T05:02:59.000Z","recommendation":"Upgrade to version 1.25.0 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1085369,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-3801\n- https://github.com/prismjs/prism/commit/0ff371bb4775a131634f47d0fe85794c547232f9\n- https://huntr.dev/bounties/8c16ab31-6eb6-46d1-b9a4-387222fe1b8a\n- https://github.com/advisories/GHSA-hqhp-5p83-hx96","created":"2021-09-20T20:44:48.000Z","reported_by":null,"title":"prismjs Regular Expression Denial of Service vulnerability","npm_advisory_id":null,"overview":"Prism is a syntax highlighting library. The prismjs package is vulnerable to ReDoS (regular expression denial of service). An attacker that is able to provide a crafted HTML comment as input may cause an application to consume an excessive amount of CPU.","url":"https://github.com/advisories/GHSA-hqhp-5p83-hx96"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@babel/core>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@angular-devkit/build-angular>@babel/core>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/builder-webpack4>raw-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/builder-webpack4>style-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/manager-webpack4>style-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085312,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.2.1","paths":["@babel/core>json5","@angular-devkit/build-angular>@babel/core>json5","@angular-devkit/build-angular>@angular-devkit/build-optimizer>loader-utils>json5","@angular-devkit/build-angular>@jsdevtools/coverage-istanbul-loader>istanbul-lib-instrument>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>@babel/core>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>babel-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>@babel/core>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>raw-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>raw-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/builder-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>style-loader>loader-utils>json5"]},{"version":"2.2.1","paths":["@storybook/manager-webpack4>style-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>style-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.2.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=2.2.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 2.2.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085312,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1087863,"path":"rpx-xui-translation>luxon","dev":false,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"2.5.0","paths":["rpx-xui-translation>luxon"]}],"metadata":null,"vulnerable_versions":">=2.0.0 <2.5.2","module_name":"luxon","severity":"high","github_advisory_id":"GHSA-3xq5-wjfh-ppjc","cves":["CVE-2023-22467"],"access":"public","patched_versions":">=2.5.2","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T22:05:00.000Z","recommendation":"Upgrade to version 2.5.2 or later","cwe":["CWE-1333"],"found_by":null,"deleted":null,"id":1087863,"references":"- https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc\n- https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\n- https://nvd.nist.gov/vuln/detail/CVE-2023-22467\n- https://github.com/moment/moment/pull/6015#issuecomment-1152961973\n- https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf\n- https://github.com/advisories/GHSA-3xq5-wjfh-ppjc","created":"2023-01-09T14:10:49.000Z","reported_by":null,"title":"Luxon Inefficient Regular Expression Complexity vulnerability","npm_advisory_id":null,"overview":"# Impact\nLuxon's `DateTime.fromRFC2822() has quadratic (N^2) complexity on some specific inputs. This causes a noticeable slowdown for inputs with lengths above 10k characters. Users providing untrusted data to this method are therefore vulnerable to (Re)DoS attacks.\n\nThis is the same bug as Moment's https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\n\n# Workarounds\nLimit the length of the input.\n\n# References\nThere is an excellent writeup of the same issue in Moment: https://github.com/moment/moment/pull/6015#issuecomment-1152961973\n\n# Details\n`DateTime.fromRFC2822(\"(\".repeat(500000))` takes a couple minutes to complete.","url":"https://github.com/advisories/GHSA-3xq5-wjfh-ppjc"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1070482,"path":"codelyzer>@angular/core","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"9.0.0","paths":["codelyzer>@angular/core"]}],"metadata":null,"vulnerable_versions":"<11.0.5","module_name":"@angular/core","severity":"moderate","github_advisory_id":"GHSA-c75v-2vq8-878f","cves":["CVE-2021-4231"],"access":"public","patched_versions":">=11.0.5","cvss":{"score":5.4,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N"},"updated":"2022-06-08T20:06:50.000Z","recommendation":"Upgrade to version 11.0.5 or later","cwe":["CWE-79"],"found_by":null,"deleted":null,"id":1070482,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2021-4231\n- https://github.com/angular/angular/issues/40136\n- https://github.com/angular/angular/commit/ba8da742e3b243e8f43d4c63aa842b44e14f2b09\n- https://security.snyk.io/vuln/SNYK-JS-ANGULARCORE-1070902\n- https://vuldb.com/?id.181356\n- https://github.com/advisories/GHSA-c75v-2vq8-878f","created":"2022-05-27T00:01:08.000Z","reported_by":null,"title":"Cross site scripting in Angular","npm_advisory_id":null,"overview":"A vulnerability was found in Angular up to 11.0.4/11.1.0-next.2. It has been classified as problematic. Affected is the handling of comments. The manipulation leads to cross site scripting. It is possible to launch the attack remotely but it might require an authentication first. Upgrading to version 11.0.5 and 11.1.0-next.3 is able to address this issue. The name of the patch is ba8da742e3b243e8f43d4c63aa842b44e14f2b09. It is recommended to upgrade the affected component.","url":"https://github.com/advisories/GHSA-c75v-2vq8-878f"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085074,"path":"istanbul-instrumenter-loader>schema-utils>ajv","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"5.5.2","paths":["istanbul-instrumenter-loader>schema-utils>ajv"]}],"metadata":null,"vulnerable_versions":"<6.12.3","module_name":"ajv","severity":"moderate","github_advisory_id":"GHSA-v88g-cgmw-v5xw","cves":["CVE-2020-15366"],"access":"public","patched_versions":">=6.12.3","cvss":{"score":5.6,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L"},"updated":"2022-12-03T03:40:56.000Z","recommendation":"Upgrade to version 6.12.3 or later","cwe":["CWE-915","CWE-1321"],"found_by":null,"deleted":null,"id":1085074,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2020-15366\n- https://github.com/ajv-validator/ajv/commit/65b2f7d76b190ac63a0d4e9154c712d7aa37049f\n- https://github.com/ajv-validator/ajv/releases/tag/v6.12.3\n- https://hackerone.com/bugs?subject=user&report_id=894259\n- https://github.com/ajv-validator/ajv/tags\n- https://github.com/advisories/GHSA-v88g-cgmw-v5xw","created":"2022-02-10T23:30:59.000Z","reported_by":null,"title":"Prototype Pollution in Ajv","npm_advisory_id":null,"overview":"An issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)","url":"https://github.com/advisories/GHSA-v88g-cgmw-v5xw"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/builder-webpack4>webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/builder-webpack4>css-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/manager-webpack4>css-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"angular2-template-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"istanbul-instrumenter-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1085311,"path":"to-string-loader>loader-utils>json5","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"1.0.1","paths":["@angular-devkit/build-angular>babel-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@angular-devkit/build-angular>worker-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["webpack>loader-utils>json5","@storybook/builder-webpack4>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/core-common>webpack>loader-utils>json5","@storybook/addon-essentials>@storybook/addon-controls>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/core-common>webpack>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>@storybook/core-common>webpack>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/builder-webpack4>html-webpack-plugin>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/manager-webpack4>css-loader>loader-utils>json5","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/manager-webpack4>css-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["@storybook/angular>tsconfig-paths-webpack-plugin>tsconfig-paths>json5"]},{"version":"0.5.1","paths":["angular2-template-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["istanbul-instrumenter-loader>loader-utils>json5"]},{"version":"1.0.1","paths":["to-string-loader>loader-utils>json5"]}],"metadata":null,"vulnerable_versions":"<1.0.2","module_name":"json5","severity":"high","github_advisory_id":"GHSA-9c47-m6qq-7p4h","cves":["CVE-2022-46175"],"access":"public","patched_versions":">=1.0.2","cvss":{"score":7.1,"vectorString":"CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:L/A:H"},"updated":"2023-01-04T13:47:06.000Z","recommendation":"Upgrade to version 1.0.2 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1085311,"references":"- https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\n- https://nvd.nist.gov/vuln/detail/CVE-2022-46175\n- https://github.com/json5/json5/issues/199\n- https://github.com/json5/json5/issues/295\n- https://github.com/json5/json5/pull/298\n- https://github.com/advisories/GHSA-9c47-m6qq-7p4h","created":"2022-12-29T01:51:03.000Z","reported_by":null,"title":"Prototype Pollution in JSON5 via Parse Method","npm_advisory_id":null,"overview":"The `parse` method of the JSON5 library before and including version `2.2.1` does not restrict parsing of keys named `__proto__`, allowing specially crafted strings to pollute the prototype of the resulting object.\n\nThis vulnerability pollutes the prototype of the object returned by `JSON5.parse` and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.\n\n## Impact\nThis vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from `JSON5.parse`. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.\n\n## Mitigation\nThis vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.\n\n## Details\n \nSuppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using `JSON5.parse`, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:\n \n    const JSON5 = require('json5');\n \n    const doSomethingDangerous = (props) => {\n      if (props.isAdmin) {\n        console.log('Doing dangerous thing as admin.');\n      } else {\n        console.log('Doing dangerous thing as user.');\n      }\n    };\n \n    const secCheckKeysSet = (obj, searchKeys) => {\n      let searchKeyFound = false;\n      Object.keys(obj).forEach((key) => {\n        if (searchKeys.indexOf(key) > -1) {\n          searchKeyFound = true;\n        }\n      });\n      return searchKeyFound;\n    };\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n \nIf the user attempts to set the `isAdmin` key, their request will be rejected:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props);\n    } else {\n      throw new Error('Forbidden...'); // Error: Forbidden…\n    }\n \nHowever, users can instead set the `__proto__` key to `{\\\"isAdmin\\\": true}`. `JSON5` will parse this key and will set the `isAdmin` key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:\n \n    const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\n    if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n      doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n    } else {\n      throw new Error('Forbidden...');\n    }\n ","url":"https://github.com/advisories/GHSA-9c47-m6qq-7p4h"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086234,"path":"@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.1","paths":["@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim"]}],"metadata":null,"vulnerable_versions":"<0.0.3","module_name":"trim","severity":"high","github_advisory_id":"GHSA-w5p7-h5w8-2hfq","cves":["CVE-2020-7753"],"access":"public","patched_versions":">=0.0.3","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:04:37.000Z","recommendation":"Upgrade to version 0.0.3 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1086234,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2020-7753\n- https://github.com/component/trim/pull/8\n- https://github.com/component/trim/blob/master/index.js\n- https://github.com/component/trim/blob/master/index.js%23L6\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1022132\n- https://snyk.io/vuln/SNYK-JS-TRIM-1017038\n- https://lists.apache.org/thread.html/r10faad1ef9166d37a1a5c9142b1af7099b8ecdc5ad05c51b8ea993d9@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r51ff3c2a4c7b8402f321eae7e624672cc2295c7bc8c12c8b871f6b0b@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r75b8d0b88833d7d96afcdce3ead65e212572ead4e7a9f34d21040196@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rb8462df3b6484e778905c09cd49a8912e1a302659860017ebe36da03@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rcc7c2865a52b544a8e49386c6880e9b9ab29bfce1052b5569d09ee4a@%3Ccommits.airflow.apache.org%3E\n- https://github.com/advisories/GHSA-w5p7-h5w8-2hfq","created":"2021-05-10T18:44:22.000Z","reported_by":null,"title":"Regular Expression Denial of Service in trim","npm_advisory_id":null,"overview":"All versions of package trim lower than 0.0.3 are vulnerable to Regular Expression Denial of Service (ReDoS) via trim().","url":"https://github.com/advisories/GHSA-w5p7-h5w8-2hfq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086234,"path":"@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.1","paths":["@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim"]}],"metadata":null,"vulnerable_versions":"<0.0.3","module_name":"trim","severity":"high","github_advisory_id":"GHSA-w5p7-h5w8-2hfq","cves":["CVE-2020-7753"],"access":"public","patched_versions":">=0.0.3","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:04:37.000Z","recommendation":"Upgrade to version 0.0.3 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1086234,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2020-7753\n- https://github.com/component/trim/pull/8\n- https://github.com/component/trim/blob/master/index.js\n- https://github.com/component/trim/blob/master/index.js%23L6\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1022132\n- https://snyk.io/vuln/SNYK-JS-TRIM-1017038\n- https://lists.apache.org/thread.html/r10faad1ef9166d37a1a5c9142b1af7099b8ecdc5ad05c51b8ea993d9@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r51ff3c2a4c7b8402f321eae7e624672cc2295c7bc8c12c8b871f6b0b@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r75b8d0b88833d7d96afcdce3ead65e212572ead4e7a9f34d21040196@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rb8462df3b6484e778905c09cd49a8912e1a302659860017ebe36da03@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rcc7c2865a52b544a8e49386c6880e9b9ab29bfce1052b5569d09ee4a@%3Ccommits.airflow.apache.org%3E\n- https://github.com/advisories/GHSA-w5p7-h5w8-2hfq","created":"2021-05-10T18:44:22.000Z","reported_by":null,"title":"Regular Expression Denial of Service in trim","npm_advisory_id":null,"overview":"All versions of package trim lower than 0.0.3 are vulnerable to Regular Expression Denial of Service (ReDoS) via trim().","url":"https://github.com/advisories/GHSA-w5p7-h5w8-2hfq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086234,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.1","paths":["@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim"]}],"metadata":null,"vulnerable_versions":"<0.0.3","module_name":"trim","severity":"high","github_advisory_id":"GHSA-w5p7-h5w8-2hfq","cves":["CVE-2020-7753"],"access":"public","patched_versions":">=0.0.3","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:04:37.000Z","recommendation":"Upgrade to version 0.0.3 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1086234,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2020-7753\n- https://github.com/component/trim/pull/8\n- https://github.com/component/trim/blob/master/index.js\n- https://github.com/component/trim/blob/master/index.js%23L6\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1022132\n- https://snyk.io/vuln/SNYK-JS-TRIM-1017038\n- https://lists.apache.org/thread.html/r10faad1ef9166d37a1a5c9142b1af7099b8ecdc5ad05c51b8ea993d9@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r51ff3c2a4c7b8402f321eae7e624672cc2295c7bc8c12c8b871f6b0b@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r75b8d0b88833d7d96afcdce3ead65e212572ead4e7a9f34d21040196@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rb8462df3b6484e778905c09cd49a8912e1a302659860017ebe36da03@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rcc7c2865a52b544a8e49386c6880e9b9ab29bfce1052b5569d09ee4a@%3Ccommits.airflow.apache.org%3E\n- https://github.com/advisories/GHSA-w5p7-h5w8-2hfq","created":"2021-05-10T18:44:22.000Z","reported_by":null,"title":"Regular Expression Denial of Service in trim","npm_advisory_id":null,"overview":"All versions of package trim lower than 0.0.3 are vulnerable to Regular Expression Denial of Service (ReDoS) via trim().","url":"https://github.com/advisories/GHSA-w5p7-h5w8-2hfq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1086234,"path":"@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.0.1","paths":["@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/addon-essentials>@storybook/addon-docs>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-parse>trim","@storybook/angular>@storybook/core>@storybook/core-server>@storybook/csf-tools>@storybook/mdx1-csf>@mdx-js/mdx>remark-mdx>remark-parse>trim"]}],"metadata":null,"vulnerable_versions":"<0.0.3","module_name":"trim","severity":"high","github_advisory_id":"GHSA-w5p7-h5w8-2hfq","cves":["CVE-2020-7753"],"access":"public","patched_versions":">=0.0.3","cvss":{"score":7.5,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"},"updated":"2023-01-09T05:04:37.000Z","recommendation":"Upgrade to version 0.0.3 or later","cwe":["CWE-400"],"found_by":null,"deleted":null,"id":1086234,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2020-7753\n- https://github.com/component/trim/pull/8\n- https://github.com/component/trim/blob/master/index.js\n- https://github.com/component/trim/blob/master/index.js%23L6\n- https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1022132\n- https://snyk.io/vuln/SNYK-JS-TRIM-1017038\n- https://lists.apache.org/thread.html/r10faad1ef9166d37a1a5c9142b1af7099b8ecdc5ad05c51b8ea993d9@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r51ff3c2a4c7b8402f321eae7e624672cc2295c7bc8c12c8b871f6b0b@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/r75b8d0b88833d7d96afcdce3ead65e212572ead4e7a9f34d21040196@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rb8462df3b6484e778905c09cd49a8912e1a302659860017ebe36da03@%3Ccommits.airflow.apache.org%3E\n- https://lists.apache.org/thread.html/rcc7c2865a52b544a8e49386c6880e9b9ab29bfce1052b5569d09ee4a@%3Ccommits.airflow.apache.org%3E\n- https://github.com/advisories/GHSA-w5p7-h5w8-2hfq","created":"2021-05-10T18:44:22.000Z","reported_by":null,"title":"Regular Expression Denial of Service in trim","npm_advisory_id":null,"overview":"All versions of package trim lower than 0.0.3 are vulnerable to Regular Expression Denial of Service (ReDoS) via trim().","url":"https://github.com/advisories/GHSA-w5p7-h5w8-2hfq"}}}
{"type":"auditAdvisory","data":{"resolution":{"id":1087894,"path":"angular2-template-loader>loader-utils","dev":true,"optional":false,"bundled":false},"advisory":{"findings":[{"version":"0.2.17","paths":["angular2-template-loader>loader-utils"]}],"metadata":null,"vulnerable_versions":"<1.4.1","module_name":"loader-utils","severity":"critical","github_advisory_id":"GHSA-76p3-8jx3-jpfq","cves":["CVE-2022-37601"],"access":"public","patched_versions":">=1.4.1","cvss":{"score":9.8,"vectorString":"CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"},"updated":"2023-01-10T05:06:11.000Z","recommendation":"Upgrade to version 1.4.1 or later","cwe":["CWE-1321"],"found_by":null,"deleted":null,"id":1087894,"references":"- https://nvd.nist.gov/vuln/detail/CVE-2022-37601\n- https://github.com/webpack/loader-utils/issues/212\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/parseQuery.js#L11\n- https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/parseQuery.js#L47\n- https://github.com/webpack/loader-utils/releases/tag/v2.0.3\n- https://github.com/webpack/loader-utils/pull/217\n- https://github.com/webpack/loader-utils/pull/220\n- https://github.com/webpack/loader-utils/releases/tag/v1.4.1\n- https://github.com/webpack/loader-utils/issues/212#issuecomment-1319192884\n- https://github.com/xmldom/xmldom/issues/436#issuecomment-1319412826\n- https://dl.acm.org/doi/abs/10.1145/3488932.3497769\n- https://dl.acm.org/doi/pdf/10.1145/3488932.3497769\n- https://lists.debian.org/debian-lts-announce/2022/12/msg00044.html\n- http://users.encs.concordia.ca/~mmannan/publications/JS-vulnerability-aisaccs2022.pdf\n- https://github.com/advisories/GHSA-76p3-8jx3-jpfq","created":"2022-10-13T12:00:28.000Z","reported_by":null,"title":"Prototype pollution in webpack loader-utils","npm_advisory_id":null,"overview":"Prototype pollution vulnerability in function parseQuery in parseQuery.js in webpack loader-utils prior to version 2.0.3 via the name variable in parseQuery.js.","url":"https://github.com/advisories/GHSA-76p3-8jx3-jpfq"}}}
